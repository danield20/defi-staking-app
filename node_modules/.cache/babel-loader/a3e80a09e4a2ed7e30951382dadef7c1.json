{"ast":null,"code":"import _regeneratorRuntime from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport Web3 from \"web3\";\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      _this.setState({\n        loading: true\n      });\n\n      _this.state.tether.methods.approve(_this.state.decentralBank._address, amount).send({\n        from: _this.state.account\n      }).on('transactionHash', function (hash) {\n        _this.state.decentralBank.methods.depositTokens(amount).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rewardBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected! Check metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                // Load Tether Contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Error! Tether contract not deployed - no detected network!');\n\n              case 19:\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 25;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 25:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rewardBalance: rwdBalance.toString()\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Error! RWD contract not deployed - no detected network!');\n\n              case 30:\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                });\n                _context3.next = 36;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 36:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                _context3.next = 41;\n                break;\n\n              case 40:\n                window.alert('Error! DecentralBank contract not deployed - no detected network!');\n\n              case 41:\n                this.setState({\n                  loading: false\n                });\n\n              case 42:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    // react code\n    value: function render() {\n      var content; // eslint-disable-next-line no-lone-blocks\n\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 23\n          }\n        }, \"Loading please\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rewardBalance,\n          stakingBalance: this.state.stakingBalance,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 23\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vm'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      }, content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // html - markup language\n// css - adds style\n// javascript allows the website to be dynamic","map":{"version":3,"sources":["/home/daniel/Projects/blockchain/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Main","Web3","Tether","RWD","DecentralBank","App","props","stakeTokens","amount","setState","loading","state","tether","methods","approve","decentralBank","_address","send","from","account","on","hash","depositTokens","rwd","tetherBalance","rewardBalance","stakingBalance","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","net","getId","networkId","tetherData","networks","Contract","abi","address","balanceOf","call","toString","rwdData","rwdBalance","decentralBankData","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport './App.css'\nimport Navbar from \"./Navbar\"\nimport Main from \"./Main\"\nimport Web3 from \"web3\"\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rewardBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    async UNSAFE_componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    async loadWeb3() {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert('No ethereum browser detected! Check metamask!')\n        }\n    }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const account = await web3.eth.getAccounts()\n        this.setState({account: account[0]})\n\n        const networkId = await web3.eth.net.getId()\n\n        // Load Tether Contract\n        const tetherData = Tether.networks[networkId]\n        if (tetherData) {\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n            this.setState({tether: tether})\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString()})\n        } else {\n            window.alert('Error! Tether contract not deployed - no detected network!')\n        }\n\n        const rwdData = RWD.networks[networkId]\n        if (rwdData) {\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n            this.setState({rwd})\n            let rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rewardBalance: rwdBalance.toString()})\n        } else {\n            window.alert('Error! RWD contract not deployed - no detected network!')\n        }\n\n        const decentralBankData = DecentralBank.networks[networkId]\n        if (decentralBankData) {\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\n            this.setState({decentralBank})\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: stakingBalance.toString()})\n        } else {\n            window.alert('Error! DecentralBank contract not deployed - no detected network!')\n        }\n\n        this.setState({loading: false})\n    }\n\n    stakeTokens = (amount) => {\n        this.setState({loading: true})\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) =>{\n        this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) =>{\n            this.setState({loading: false})\n        })})\n    }\n\n    // react code\n    render() {\n        let content\n        // eslint-disable-next-line no-lone-blocks\n        {this.state.loading ?\n            content = <p id='loader' className=\"text-center\" style={{margin:'30px'}}>Loading please</p> :\n            content = <Main \n            tetherBalance={this.state.tetherBalance}\n            rwdBalance={this.state.rewardBalance}\n            stakingBalance={this.state.stakingBalance}/>}\n        return (\n            <div>\n                <Navbar account={this.state.account}/>\n                <div className=\"container-fluid mt-5\">\n                    <div className=\"row\">\n                        <main role='main' className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth:'600px', minHeight:'100vm'}}>\n                            <div>\n                                {content}\n                            </div>\n                        </main>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n// html - markup language\n// css - adds style\n// javascript allows the website to be dynamic"]},"metadata":{},"sourceType":"module"}